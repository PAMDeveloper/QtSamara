/* flex-generated file modified by flex_MSVC.pl on Sun Sep 17 11:17:17 2006*/
#pragma warning( disable: 4005 ) // unreferenced label
#pragma warning( disable: 4102 ) // unreferenced label
namespace std {} using namespace std;
#define yy_create_buffer delphi_yy_create_buffer
#define yy_delete_buffer delphi_yy_delete_buffer
#define yy_scan_buffer delphi_yy_scan_buffer
#define yy_scan_string delphi_yy_scan_string
#define yy_scan_bytes delphi_yy_scan_bytes
#define yy_flex_debug delphi_yy_flex_debug
#define yy_init_buffer delphi_yy_init_buffer
#define yy_flush_buffer delphi_yy_flush_buffer
#define yy_load_buffer_state delphi_yy_load_buffer_state
#define yy_switch_to_buffer delphi_yy_switch_to_buffer
#define yyin delphi_yyin
#define yyleng delphi_yyleng
#define yylex delphi_yylex
#define yyout delphi_yyout
#define yyrestart delphi_yyrestart
#define yytext delphi_yytext
#define yylineno delphi_yylineno

#line 24 "delphi_yy.cpp"
/* A lexical scanner generated by flex */

/* Scanner skeleton version:
 * $Header: /home/daffy/u0/vern/flex/RCS/flex.skl,v 2.91 96/09/10 16:58:48 vern Exp $
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5

#include <cstdio> // flex_MSVC fix: was <stdio.h>


/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
//#define __cplusplus -- disabled by flex_MSVC
#endif
#endif


#ifdef __cplusplus

#include <cstdlib> // flex_MSVC fix: was <stdlib.h>
//#include <unistd.h> -- disabled by flex_MSVC

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
#include <cstdlib> // flex_MSVC fix: was <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;
extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		*yy_cp = yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
	};

static YY_BUFFER_STATE yy_current_buffer = 0;

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer


/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;

static int yy_n_chars;		/* number of characters read into yy_ch_buf */


int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 1;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart YY_PROTO(( FILE *input_file ));

void yy_switch_to_buffer YY_PROTO(( YY_BUFFER_STATE new_buffer ));
void yy_load_buffer_state YY_PROTO(( void ));
YY_BUFFER_STATE yy_create_buffer YY_PROTO(( FILE *file, int size ));
void yy_delete_buffer YY_PROTO(( YY_BUFFER_STATE b ));
void yy_init_buffer YY_PROTO(( YY_BUFFER_STATE b, FILE *file ));
void yy_flush_buffer YY_PROTO(( YY_BUFFER_STATE b ));
#define YY_FLUSH_BUFFER yy_flush_buffer( yy_current_buffer )

YY_BUFFER_STATE yy_scan_buffer YY_PROTO(( char *base, yy_size_t size ));
YY_BUFFER_STATE yy_scan_string YY_PROTO(( yyconst char *yy_str ));
YY_BUFFER_STATE yy_scan_bytes YY_PROTO(( yyconst char *bytes, int len ));

static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t ));
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)


#define YY_USES_REJECT

#define yywrap() 1
#define YY_SKIP_YYWRAP
typedef unsigned char YY_CHAR;
FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;
typedef int yy_state_type;
extern int yylineno;
int yylineno = 1;
extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state YY_PROTO(( void ));
static yy_state_type yy_try_NUL_trans YY_PROTO(( yy_state_type current_state ));
static int yy_get_next_buffer YY_PROTO(( void ));
static void yy_fatal_error YY_PROTO(( yyconst char msg[] ));

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 152
#define YY_END_OF_BUFFER 153
static yyconst short int yy_acclist[754] =
    {   0,
      153,  151,  152,  119,  151,  152,  120,  152,  120,  151,
      152,  124,  151,  152,  151,  152,  151,  152,  130,  151,
      152,  131,  151,  152,  141,  151,  152,  139,  151,  152,
      134,  151,  152,  140,  151,  152,  133,  151,  152,  142,
      151,  152,  125,  126,  151,  152,  136,  151,  152,  135,
      151,  152,  146,  151,  152,  144,  151,  152,  147,  151,
      152,  137,  151,  152,  128,  151,  152,  129,  151,  152,
      138,  151,  152,  127,  151,  152,  127,  151,  152,  127,
      151,  152,  127,  151,  152,  127,  151,  152,  127,  151,
      152,  127,  151,  152,  127,  151,  152,  127,  151,  152,

      127,  151,  152,  127,  151,  152,  127,  151,  152,  127,
      151,  152,  127,  151,  152,  127,  151,  152,  127,  151,
      152,  127,  151,  152,  127,  151,  152,  127,  151,  152,
      127,  151,  152,  127,  151,  152,  151,  152,  119,  120,
      125,  123,  132,  122,  125,  126,  143,  148,  145,  149,
      150,  127,  127,  127,  127,   11,  127,  127,  127,  127,
      127,  127,  127,  127,  127,  127,   61,  127,  127,  127,
      127,  127,  127,  127,  127,  127,  127,   57,  127,  127,
        3,  127,   28,  127,  127,  127,  127,  127,  127,  127,
      127,  127,  127,   63,  127,  109,  127,    4,  127,  127,

      127,  127,  127,  127,  127,  127,  127,  127,  127,  127,
      127,   20,  127,  127,  127,  127,  127,  127,  127,  127,
      127,  127,  127,  121,  122,  126,  126,  127,    1,  127,
      127,   16,  127,  127,  127,  127,  127,  127,  127,  127,
      127,  113,  127,  127,  127,  127,   56,  127,  127,  127,
      127,   12,  127,  127,  127,  127,  127,  127,   82,  127,
      127,  127,   42,  127,  127,  127,  127,  112,  127,  127,
      127,  127,  127,  127,  127,  127,  127,   43,  127,  127,
      127,   48,  127,  127,   53,  127,  127,    9,  127,  127,
      127,  127,  127,  127,  127,  127,  127,  127,  127,  127,

      127,  127,  127,  127,   54,  127,   59,  127,   64,  127,
      127,  127,  127,  127,  127,  127,   25,  127,  127,  127,
      127,  127,   50,  127,  127,  127,  127,  127,   65,  127,
      127,  127,  127,  127,  127,  127,  127,  127,   26,  127,
      127,  127,  127,  127,  127,  127,  127,  127,  127,    7,
      127,  127,  108,  127,  127,  127,  127,   27,  127,  127,
      127,  127,   52,  127,  127,  127,  127,  127,  127,  127,
      127,  127,  127,   68,  127,   73,  127,  127,  127,  127,
      127,  127,  127,  127,  127,  127,  127,  127,  127,   84,
      127,  127,  127,  127,  127,  127,  127,  127,  127,  127,

      127,  127,  127,   10,  127,  127,  110,  127,   30,  127,
       35,  127,  127,   45,  127,  127,  127,   60,  127,  127,
      127,  127,    6,  127,  127,  127,  127,   21,  127,  107,
      127,   86,  127,   31,  127,   36,  127,  127,  127,  127,
      127,  127,  127,  127,  127,  127,  127,  111,  127,  127,
      127,  127,  127,   97,  127,  127,  127,  127,  127,   33,
      127,  127,  127,  127,  127,  127,  127,  127,  127,  127,
      127,  127,  127,  127,  127,  127,   34,  127,  127,  127,
      127,  127,  127,  127,  127,  127,  127,  127,  127,  127,
      127,  127,   40,  127,  127,   55,  127,   95,  127,  127,

      127,  127,  127,  127,  127,  127,  127,  127,  127,  101,
      127,  127,    2,  127,  127,   17,  127,   72,  127,  127,
      127,  127,  127,  127,  127,  127,  127,   18,  127,  127,
      127,  127,  127,   58,  127,  127,  127,  127,   14,  127,
       98,  127,  127,  127,  127,  127,  127,   74,  127,  127,
      127,   39,  127,  127,  127,   44,  127,  127,  127,  127,
      105,  127,  127,  127,   85,  127,    5,  127,  127,  127,
      127,  127,  127,  127,  127,  127,  127,  127,  127,   96,
      127,  127,  127,   67,  127,   22,  127,  127,  127,   37,
      127,   87,  127,  127,  127,  127,  127,  127,   38,  127,

      102,  127,  127,  127,  127,   93,  127,  103,  127,  127,
       24,  127,  127,  127,  127,  127,  127,  127,  127,  127,
      127,  127,   80,  127,  127,   90,  127,  127,  117,  121,
       66,  127,   71,  127,  127,  114,  127,  127,  127,   91,
      127,  106,  127,  127,  127,   77,  127,  127,   47,  127,
      127,  127,  127,  127,  127,   83,  127,   88,  127,  127,
       29,  127,  127,  127,   89,  127,   94,  127,  127,  104,
      127,   70,  127,  127,   75,  127,  127,  127,  117,  118,
      121,  115,  121,   76,  127,   81,  127,  127,  127,  127,
      127,  127,    8,  127,  127,   23,  127,   78,  127,   19,

      127,   69,  127,   79,  127,  127,  127,   15,  127,  100,
      127,  118,  115,  116,  121,  127,   46,  127,  127,  127,
      127,   92,  127,  127,  127,  127,  116,   41,  127,  127,
      127,  127,  127,   99,  127,  127,  127,   32,  127,  127,
      127,  127,   51,  127,  127,  127,  127,   62,  127,   13,
      127,   49,  127
    } ;

static yyconst short int yy_accept[584] =
    {   0,
        1,    1,    1,    2,    4,    7,    9,   12,   15,   17,
       19,   22,   25,   28,   31,   34,   37,   40,   43,   47,
       50,   53,   56,   59,   62,   65,   68,   71,   74,   77,
       80,   83,   86,   89,   92,   95,   98,  101,  104,  107,
      110,  113,  116,  119,  122,  125,  128,  131,  134,  137,
      139,  140,  141,  142,  142,  143,  143,  144,  145,  145,
      147,  147,  148,  149,  150,  151,  152,  153,  154,  155,
      156,  158,  159,  160,  161,  162,  163,  164,  165,  166,
      167,  169,  170,  171,  172,  173,  174,  175,  176,  177,
      178,  180,  181,  183,  185,  186,  187,  188,  189,  190,

      191,  192,  193,  194,  196,  198,  200,  201,  202,  203,
      204,  205,  206,  207,  208,  209,  210,  211,  212,  214,
      215,  216,  217,  218,  219,  220,  221,  222,  223,  224,
      224,  224,  225,  225,  225,  226,  227,  227,  228,  229,
      231,  232,  234,  235,  236,  237,  238,  239,  240,  241,
      242,  244,  245,  246,  247,  249,  250,  251,  252,  254,
      255,  256,  257,  258,  259,  261,  262,  263,  265,  266,
      267,  268,  270,  271,  272,  273,  274,  275,  276,  277,
      278,  280,  281,  282,  284,  285,  287,  288,  290,  291,
      292,  293,  294,  295,  296,  297,  298,  299,  300,  301,

      302,  303,  304,  305,  307,  309,  311,  312,  313,  314,
      315,  316,  317,  319,  320,  321,  322,  323,  325,  326,
      327,  328,  329,  331,  331,  331,  331,  332,  333,  334,
      335,  336,  337,  338,  339,  341,  342,  343,  344,  345,
      346,  347,  348,  349,  350,  352,  353,  355,  356,  357,
      358,  360,  361,  362,  363,  365,  366,  367,  368,  369,
      370,  371,  372,  373,  374,  376,  378,  379,  380,  381,
      382,  383,  384,  385,  386,  387,  388,  389,  390,  392,
      393,  394,  395,  396,  397,  398,  399,  400,  401,  402,
      403,  404,  406,  407,  409,  411,  413,  414,  416,  417,

      418,  420,  421,  421,  421,  421,  422,  423,  425,  426,
      427,  428,  430,  432,  434,  436,  438,  439,  440,  441,
      442,  443,  444,  445,  446,  447,  448,  450,  451,  452,
      453,  454,  456,  457,  458,  459,  460,  462,  463,  464,
      465,  466,  467,  468,  469,  470,  471,  472,  473,  474,
      475,  476,  477,  479,  480,  481,  482,  483,  484,  485,
      486,  487,  488,  489,  490,  491,  492,  493,  495,  496,
      498,  500,  500,  500,  500,  500,  501,  502,  503,  504,
      505,  506,  507,  508,  509,  510,  512,  513,  515,  516,
      518,  520,  521,  522,  523,  524,  525,  526,  527,  528,

      530,  531,  532,  533,  534,  536,  537,  538,  539,  541,
      543,  544,  545,  546,  547,  548,  550,  551,  552,  554,
      555,  556,  558,  559,  560,  561,  563,  564,  565,  567,
      569,  570,  571,  572,  572,  572,  572,  572,  573,  574,
      575,  576,  577,  578,  579,  580,  582,  583,  584,  586,
      588,  589,  590,  592,  594,  595,  596,  597,  598,  599,
      601,  603,  604,  605,  606,  608,  610,  611,  613,  614,
      615,  616,  617,  618,  619,  620,  621,  622,  623,  625,
      626,  628,  629,  629,  631,  631,  631,  631,  633,  635,
      636,  638,  639,  640,  642,  644,  645,  646,  648,  649,

      651,  652,  653,  654,  655,  656,  658,  660,  661,  663,
      664,  665,  667,  669,  670,  672,  674,  675,  677,  678,
      679,  679,  680,  680,  682,  682,  684,  684,  686,  688,
      689,  690,  691,  692,  693,  695,  696,  698,  700,  702,
      704,  706,  707,  708,  710,  712,  712,  713,  713,  714,
      714,  716,  717,  719,  720,  721,  722,  724,  725,  726,
      727,  727,  728,  730,  731,  732,  733,  734,  736,  737,
      738,  740,  741,  742,  743,  745,  746,  747,  748,  750,
      752,  754,  754
    } ;

static yyconst int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    1,    5,    6,    1,    1,    7,    8,
        9,   10,   11,   12,   13,   14,   15,   16,   16,   16,
       16,   16,   16,   16,   16,   16,   16,   17,   18,   19,
       20,   21,    1,   22,   27,   28,   29,   30,   31,   32,
       33,   34,   35,   36,   37,   38,   39,   40,   41,   42,
       43,   44,   45,   46,   47,   48,   49,   50,   51,   52,
       23,    1,   24,   25,   26,    1,   27,   28,   29,   30,

       31,   32,   33,   34,   35,   36,   37,   38,   39,   40,
       41,   42,   43,   44,   45,   46,   47,   48,   49,   50,
       51,   52,   53,    1,   54,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst int yy_meta[55] =
    {   0,
        1,    1,    2,    3,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    4,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    1,    1
    } ;

static yyconst short int yy_base[596] =
    {   0,
        0,    0,  677,  678,  674,  678,  672,  678,   39,  667,
      663,  678,  678,  678,  678,  678,  658,  656,   42,  650,
      678,   39,  678,  649,  678,  678,  678,  654,    0,   34,
       32,   34,   49,   45,   61,  626,   54,   30,   46,   70,
       75,   62,   83,   86,   84,   76,   77,   92,  625,   76,
      663,  678,  113,  657,  656,  652,  678,    0,  645,  117,
      136,  678,  678,  678,  678,  678,    0,  615,  629,  614,
       53,  611,  623,  624,  609,  622,  625,  611,  105,  106,
      601,  609,  603,  617,  124,  117,  118,  602,  605,  598,
        0,  601,  133,    0,  614,  613,  595,  609,  599,  610,

      598,  127,  599,    0,    0,    0,  588,  602,  131,  134,
      604,  596,  145,  598,  583,  139,  151,  153,    0,  135,
      586,  150,  596,  582,  581,  589,  577,  587,  577,  566,
      158,  678,  609,  609,    0,  108,  601,  600,  153,    0,
      588,    0,  167,  573,  578,  585,  580,  581,  564,  119,
        0,  581,  561,  564,    0,  565,  577,  572,    0,  571,
      555,  559,  568,  553,    0,  566,  569,  546,  565,  552,
      554,    0,  560,  559,  543,  553,  556,  555,  541,  539,
        0,  552,  538,    0,  550,    0,  549,    0,  535,  541,
      548,  528,  171,  537,  529,  543,  531,  536,  530,  538,

      521,  168,  536,    0,    0,    0,  537,  521,  529,  523,
      531,  530,    0,  529,  513,  523,  512,    0,  510,  517,
      520,  507,    0,  167,  169,  543,  513,  506,  498,  509,
      514,  507,  505,  507,    0,  505,  497,  495,  111,  493,
      495,  503,  491,  497,    0,  493,    0,  490,  489,  501,
        0,  493,  503,  483,    0,  497,  477,  482,  490,  484,
      479,  484,  494,  493,    0,    0,  487,  489,  170,  179,
      490,  489,  484,  470,  482,  481,  476,  479,  468,  464,
      462,  460,  478,  469,  473,  455,  463,  471,  472,  467,
      457,    0,  469,    0,    0,    0,  457,    0,  447,  462,

        0,  461,  166,  186,  188,  444,  463,    0,  461,  448,
      460,    0,    0,    0,    0,  442,  450,  444,  445,  435,
      189,  440,  445,  433,  432,  437,    0,  187,  432,  440,
      435,    0,  438,  445,  440,  438,    0,  425,  435,  440,
      420,  424,  429,  430,  432,  423,  414,  429,  431,  413,
      427,  198,    0,  415,  424,  407,  408,  405,  406,  418,
      404,  401,  419,  407,  414,  410,  412,    0,  414,    0,
      399,  193,  191,  199,  201,  393,  409,  399,  405,  389,
      387,  393,  385,  385,  401,    0,  383,    0,  399,    0,
      382,  399,  373,  373,  393,  381,  390,  374,  381,    0,

      391,  366,  385,  368,    0,  387,  383,  381,    0,    0,
      380,  363,  370,  362,  361,    0,  372,  367,    0,  373,
      362,    0,  371,  361,  371,    0,  361,  360,    0,    0,
      349,  358,  355,  229,  202,  203,  205,  363,  347,  361,
      361,  359,  360,  343,  356,    0,  340,  354,    0,    0,
      346,  356,    0,    0,  342,  341,  349,  344,  349,    0,
        0,  339,  346,  344,    0,    0,  330,    0,  322,  341,
      340,  319,  325,  338,  322,  320,  334,  326,    0,  336,
        0,  324,  230,  307,  234,  235,  207,    0,    0,  316,
        0,  329,  312,    0,    0,  316,  312,    0,  309,    0,

      308,  323,  300,  320,  304,    0,    0,  318,    0,  316,
      308,    0,    0,  287,    0,    0,  277,    0,  271,  263,
      245,  244,  238,  242,  241,  240,  243,    0,    0,  252,
      247,  258,  252,  221,    0,  259,    0,    0,    0,    0,
        0,  256,  236,    0,    0,  227,  226,  225,  224,  246,
      223,  232,    0,  248,  233,  227,    0,  226,  240,  226,
      215,  214,    0,  238,  225,  229,  228,    0,  227,  229,
        0,  217,  213,  212,    0,  211,  210,  158,    0,    0,
        0,  678,  300,   87,  304,  308,  312,  316,  320,  324,
      328,  332,  336,  340,  344

    } ;

static yyconst short int yy_def[596] =
    {   0,
      582,    1,  582,  582,  582,  582,  582,  582,  582,  583,
      582,  582,  582,  582,  582,  582,  582,  582,  582,  582,
      582,  582,  582,  582,  582,  582,  582,  582,  584,  584,
      584,  584,  584,  584,  584,  584,  584,  584,  584,  584,
      584,  584,  584,  584,  584,  584,  584,  584,  584,  585,
      582,  582,  582,  583,  582,  586,  582,  587,  582,  582,
      582,  582,  582,  582,  582,  582,  584,  584,  584,  584,
      584,  584,  584,  584,  584,  584,  584,  584,  584,  584,
      584,  584,  584,  584,  584,  584,  584,  584,  584,  584,
      584,  584,  584,  584,  584,  584,  584,  584,  584,  584,

      584,  584,  584,  584,  584,  584,  584,  584,  584,  584,
      584,  584,  584,  584,  584,  584,  584,  584,  584,  584,
      584,  584,  584,  584,  584,  584,  584,  584,  584,  585,
      585,  582,  586,  586,  587,  582,  582,  582,  584,  584,
      584,  584,  584,  584,  584,  584,  584,  584,  584,  584,
      584,  584,  584,  584,  584,  584,  584,  584,  584,  584,
      584,  584,  584,  584,  584,  584,  584,  584,  584,  584,
      584,  584,  584,  584,  584,  584,  584,  584,  584,  584,
      584,  584,  584,  584,  584,  584,  584,  584,  584,  584,
      584,  584,  584,  584,  584,  584,  584,  584,  584,  584,

      584,  584,  584,  584,  584,  584,  584,  584,  584,  584,
      584,  584,  584,  584,  584,  584,  584,  584,  584,  584,
      584,  584,  584,  585,  585,  586,  584,  584,  584,  584,
      584,  584,  584,  584,  584,  584,  584,  584,  584,  584,
      584,  584,  584,  584,  584,  584,  584,  584,  584,  584,
      584,  584,  584,  584,  584,  584,  584,  584,  584,  584,
      584,  584,  584,  584,  584,  584,  584,  584,  584,  584,
      584,  584,  584,  584,  584,  584,  584,  584,  584,  584,
      584,  584,  584,  584,  584,  584,  584,  584,  584,  584,
      584,  584,  584,  584,  584,  584,  584,  584,  584,  584,

      584,  584,  585,  585,  585,  584,  584,  584,  584,  584,
      584,  584,  584,  584,  584,  584,  584,  584,  584,  584,
      584,  584,  584,  584,  584,  584,  584,  584,  584,  584,
      584,  584,  584,  584,  584,  584,  584,  584,  584,  584,
      584,  584,  584,  584,  584,  584,  584,  584,  584,  584,
      584,  584,  584,  584,  584,  584,  584,  584,  584,  584,
      584,  584,  584,  584,  584,  584,  584,  584,  584,  584,
      584,  585,  585,  585,  585,  584,  584,  584,  584,  584,
      584,  584,  584,  584,  584,  584,  584,  584,  584,  584,
      584,  584,  584,  584,  584,  584,  584,  584,  584,  584,

      584,  584,  584,  584,  584,  584,  584,  584,  584,  584,
      584,  584,  584,  584,  584,  584,  584,  584,  584,  584,
      584,  584,  584,  584,  584,  584,  584,  584,  584,  584,
      584,  584,  584,  588,  585,  585,  585,  584,  584,  584,
      584,  584,  584,  584,  584,  584,  584,  584,  584,  584,
      584,  584,  584,  584,  584,  584,  584,  584,  584,  584,
      584,  584,  584,  584,  584,  584,  584,  584,  584,  584,
      584,  584,  584,  584,  584,  584,  584,  584,  584,  584,
      584,  584,  588,  589,  590,  591,  585,  584,  584,  584,
      584,  584,  584,  584,  584,  584,  584,  584,  584,  584,

      584,  584,  584,  584,  584,  584,  584,  584,  584,  584,
      584,  584,  584,  584,  584,  584,  584,  584,  584,  584,
      589,  589,  590,  592,  591,  593,  594,  584,  584,  584,
      584,  584,  584,  584,  584,  584,  584,  584,  584,  584,
      584,  584,  584,  584,  584,  592,  592,  593,  593,  594,
      595,  584,  584,  584,  584,  584,  584,  584,  584,  584,
      595,  595,  584,  584,  584,  584,  584,  584,  584,  584,
      584,  584,  584,  584,  584,  584,  584,  584,  584,  584,
      584,    0,  582,  582,  582,  582,  582,  582,  582,  582,
      582,  582,  582,  582,  582

    } ;

static yyconst short int yy_nxt[733] =
    {   0,
        4,    5,    6,    7,    8,    9,   10,   11,   12,   13,
       14,   15,   16,   17,   18,   19,   20,   21,   22,   23,
       24,   25,   26,   27,   28,   29,   30,   31,   32,   33,
       34,   35,   36,   29,   37,   29,   29,   38,   39,   40,
       41,   42,   29,   43,   44,   45,   46,   47,   48,   49,
       29,   29,   50,    4,   53,   59,   95,   60,   63,   64,
       75,   68,   73,   76,   96,   53,   53,   53,   53,   53,
       53,   77,   61,   69,   78,   74,   97,   70,   71,   79,
       72,  131,   83,   80,   84,   91,   98,   86,  109,   81,
       67,  142,   92,   93,   85,   87,   99,  143,   94,   82,

      100,   88,  103,  124,  101,  110,  104,   89,  111,  112,
      102,  125,  114,  113,  105,  122,  115,  118,  106,  116,
      123,  107,  108,  136,  119,  126,  127,  120,   53,  132,
       59,  117,   60,  151,  121,  128,  152,  317,   61,   53,
       53,   53,   53,   53,   53,  318,  137,   61,  137,  153,
      154,  138,  160,  155,  164,  166,  185,  167,  161,  190,
      165,  172,  173,  238,  239,  162,  174,  175,  192,  163,
      176,  196,  186,  197,  193,  191,  205,  198,  177,  199,
      207,  212,  206,  210,  215,  213,  200,  201,  224,  202,
      581,  208,  225,  227,  209,  216,  211,  230,  228,  273,

      305,  231,  285,  274,  303,  344,  304,  342,  286,  345,
      372,  132,  275,  343,  287,  373,  276,  374,  386,  132,
      132,  393,  132,  434,  394,  435,  416,  375,  387,  436,
      437,  130,  130,  485,  486,  487,  130,  130,  527,  132,
      130,  132,  417,  130,  132,  130,  132,  556,  130,  580,
      579,  578,  132,  577,  132,  132,  132,  576,  132,  575,
      132,  574,  573,  572,  571,  557,  570,  562,  562,  569,
      568,  567,  566,  565,  564,  563,  562,  549,  549,  547,
      547,  560,  484,  484,  559,  558,  555,  524,  526,  554,
      553,  524,  552,  549,  526,  547,  551,  522,  522,  551,

       54,   54,   54,   54,  130,  130,  130,  130,  133,  133,
      133,  133,  135,  545,  544,  135,  483,  483,  483,  483,
      521,  543,  521,  521,  523,  523,  523,  523,  525,  525,
      525,  525,  546,  542,  546,  546,  548,  541,  548,  548,
      550,  550,  550,  550,  561,  540,  561,  561,  539,  538,
      537,  536,  535,  534,  533,  532,  531,  530,  529,  528,
      522,  520,  519,  518,  517,  516,  515,  514,  513,  512,
      511,  510,  509,  508,  507,  506,  505,  504,  503,  502,
      501,  500,  499,  498,  497,  496,  495,  494,  493,  492,
      491,  490,  489,  488,  482,  481,  480,  479,  478,  477,

      476,  475,  474,  473,  472,  471,  470,  469,  468,  467,
      466,  465,  464,  463,  462,  461,  460,  459,  458,  457,
      456,  455,  454,  453,  452,  451,  450,  449,  448,  447,
      446,  445,  444,  443,  442,  441,  440,  439,  438,  433,
      432,  431,  430,  429,  428,  427,  426,  425,  424,  423,
      422,  421,  420,  419,  418,  415,  414,  413,  412,  411,
      410,  409,  408,  407,  406,  405,  404,  403,  402,  401,
      400,  399,  398,  397,  396,  395,  392,  391,  390,  389,
      388,  385,  384,  383,  382,  381,  380,  379,  378,  377,
      376,  371,  370,  369,  368,  367,  366,  365,  364,  363,

      362,  361,  360,  359,  358,  357,  356,  355,  354,  353,
      352,  351,  350,  349,  348,  347,  346,  341,  340,  339,
      338,  337,  336,  335,  334,  333,  332,  331,  330,  329,
      328,  327,  326,  325,  324,  323,  322,  321,  320,  319,
      316,  315,  314,  313,  312,  311,  310,  309,  308,  307,
      306,  132,  302,  301,  300,  299,  298,  297,  296,  295,
      294,  293,  292,  291,  290,  289,  288,  284,  283,  282,
      281,  280,  279,  278,  277,  272,  271,  270,  269,  268,
      267,  266,  265,  264,  263,  262,  261,  260,  259,  258,
      257,  256,  255,  254,  253,  252,  251,  250,  249,  248,

      247,  246,  245,  244,  243,  242,  241,  240,  237,  236,
      235,  234,  233,  232,  229,  138,  138,  582,  226,  132,
      223,  222,  221,  220,  219,  218,  217,  214,  204,  203,
      195,  194,  189,  188,  187,  184,  183,  182,  181,  180,
      179,  178,  171,  170,  169,  168,  159,  158,  157,  156,
      150,  149,  148,  147,  146,  145,  144,  141,  140,  139,
      136,  134,   54,   55,   51,  129,   90,   66,   65,   62,
       58,   57,   56,   55,   52,   51,  582,    3,  582,  582,
      582,  582,  582,  582,  582,  582,  582,  582,  582,  582,
      582,  582,  582,  582,  582,  582,  582,  582,  582,  582,

      582,  582,  582,  582,  582,  582,  582,  582,  582,  582,
      582,  582,  582,  582,  582,  582,  582,  582,  582,  582,
      582,  582,  582,  582,  582,  582,  582,  582,  582,  582,
      582,  582
    } ;

static yyconst short int yy_chk[733] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    9,   19,   38,   19,   22,   22,
       32,   30,   31,   32,   38,    9,    9,    9,    9,    9,
        9,   32,   19,   30,   32,   31,   39,   30,   30,   33,
       30,   50,   34,   33,   34,   37,   39,   35,   42,   33,
      584,   71,   37,   37,   34,   35,   40,   71,   37,   33,

       40,   35,   41,   47,   40,   42,   41,   35,   42,   43,
       40,   47,   44,   43,   41,   46,   44,   45,   41,   44,
       46,   41,   41,  136,   45,   48,   48,   45,   53,   50,
       60,   44,   60,   79,   45,   48,   79,  239,  136,   53,
       53,   53,   53,   53,   53,  239,   61,   60,   61,   79,
       80,   61,   85,   80,   86,   87,  102,   87,   85,  109,
       86,   93,   93,  150,  150,   85,   93,   93,  110,   85,
       93,  113,  102,  113,  110,  109,  116,  113,   93,  113,
      117,  120,  116,  118,  122,  120,  113,  113,  131,  113,
      578,  117,  131,  139,  117,  122,  118,  143,  139,  193,

      225,  143,  202,  193,  224,  270,  224,  269,  202,  270,
      303,  131,  193,  269,  202,  304,  193,  305,  321,  303,
      224,  328,  225,  372,  328,  373,  352,  305,  321,  374,
      375,  434,  483,  435,  436,  437,  485,  486,  487,  304,
      523,  305,  352,  525,  373,  527,  372,  534,  550,  577,
      576,  574,  374,  573,  375,  435,  436,  572,  437,  570,
      487,  569,  567,  566,  565,  534,  564,  562,  561,  560,
      559,  558,  556,  555,  554,  552,  551,  549,  548,  547,
      546,  543,  434,  483,  542,  536,  533,  485,  486,  532,
      531,  523,  530,  526,  525,  524,  527,  522,  521,  550,

      583,  583,  583,  583,  585,  585,  585,  585,  586,  586,
      586,  586,  587,  520,  519,  587,  588,  588,  588,  588,
      589,  517,  589,  589,  590,  590,  590,  590,  591,  591,
      591,  591,  592,  514,  592,  592,  593,  511,  593,  593,
      594,  594,  594,  594,  595,  510,  595,  595,  508,  505,
      504,  503,  502,  501,  499,  497,  496,  493,  492,  490,
      484,  482,  480,  478,  477,  476,  475,  474,  473,  472,
      471,  470,  469,  467,  464,  463,  462,  459,  458,  457,
      456,  455,  452,  451,  448,  447,  445,  444,  443,  442,
      441,  440,  439,  438,  433,  432,  431,  428,  427,  425,

      424,  423,  421,  420,  418,  417,  415,  414,  413,  412,
      411,  408,  407,  406,  404,  403,  402,  401,  399,  398,
      397,  396,  395,  394,  393,  392,  391,  389,  387,  385,
      384,  383,  382,  381,  380,  379,  378,  377,  376,  371,
      369,  367,  366,  365,  364,  363,  362,  361,  360,  359,
      358,  357,  356,  355,  354,  351,  350,  349,  348,  347,
      346,  345,  344,  343,  342,  341,  340,  339,  338,  336,
      335,  334,  333,  331,  330,  329,  326,  325,  324,  323,
      322,  320,  319,  318,  317,  316,  311,  310,  309,  307,
      306,  302,  300,  299,  297,  293,  291,  290,  289,  288,

      287,  286,  285,  284,  283,  282,  281,  280,  279,  278,
      277,  276,  275,  274,  273,  272,  271,  268,  267,  264,
      263,  262,  261,  260,  259,  258,  257,  256,  254,  253,
      252,  250,  249,  248,  246,  244,  243,  242,  241,  240,
      238,  237,  236,  234,  233,  232,  231,  230,  229,  228,
      227,  226,  222,  221,  220,  219,  217,  216,  215,  214,
      212,  211,  210,  209,  208,  207,  203,  201,  200,  199,
      198,  197,  196,  195,  194,  192,  191,  190,  189,  187,
      185,  183,  182,  180,  179,  178,  177,  176,  175,  174,
      173,  171,  170,  169,  168,  167,  166,  164,  163,  162,

      161,  160,  158,  157,  156,  154,  153,  152,  149,  148,
      147,  146,  145,  144,  141,  138,  137,  134,  133,  130,
      129,  128,  127,  126,  125,  124,  123,  121,  115,  114,
      112,  111,  108,  107,  103,  101,  100,   99,   98,   97,
       96,   95,   92,   90,   89,   88,   84,   83,   82,   81,
       78,   77,   76,   75,   74,   73,   72,   70,   69,   68,
       59,   56,   55,   54,   51,   49,   36,   28,   24,   20,
       18,   17,   11,   10,    7,    5,    3,  582,  582,  582,
      582,  582,  582,  582,  582,  582,  582,  582,  582,  582,
      582,  582,  582,  582,  582,  582,  582,  582,  582,  582,

      582,  582,  582,  582,  582,  582,  582,  582,  582,  582,
      582,  582,  582,  582,  582,  582,  582,  582,  582,  582,
      582,  582,  582,  582,  582,  582,  582,  582,  582,  582,
      582,  582
    } ;

static yy_state_type yy_state_buf[YY_BUF_SIZE + 2], *yy_state_ptr;
static char *yy_full_match;
static int yy_lp;
#define REJECT \
{ \
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */ \
yy_cp = yy_full_match; /* restore poss. backed-over text */ \
++yy_lp; \
goto find_rule; \
}
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "delphi_yy.l"
#define INITIAL 0
/* Scanner to convert pascal source code c++ */
/* flex reference:  http://www.gnu.org/manual/flex-2.5.4/html_mono/flex.html

Note: for compatibility with standard C++, the output of flex is
      post-processed using a perl script, which is attached: flex_MSVC

Compilation command:
      flex_MSVC  -odelphi_yy.cpp  delphi_yy.l
*/
#define YY_NEVER_INTERACTIVE 1
#line 20 "delphi_yy.l"

#include "delphi_yy.h"

#define YY_DECL EToken delphi_yylex()

void fail(char const* msg);
#define YY_FATAL_ERROR(msg) fail( "flex failure: " msg )

/*   ANY   ([^\0]|{STR}|{CMT})*   */
#line 861 "delphi_yy.cpp"

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO(( void ));
#else
extern int yywrap YY_PROTO(( void ));
#endif
#endif

#ifndef YY_NO_UNPUT
static void yyunput YY_PROTO(( int c, char *buf_ptr ));
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen YY_PROTO(( yyconst char * ));
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput YY_PROTO(( void ));
#else
static int input YY_PROTO(( void ));
#endif
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <cstdlib> // flex_MSVC fix: was <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( yy_current_buffer->yy_is_interactive ) \
		{ \
		int c = '*', n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else if ( ((result = fread( buf, 1, max_size, yyin )) == 0) \
		  && ferror( yyin ) ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yylex YY_PROTO(( void ))
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

YY_DECL
	{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;

#line 44 "delphi_yy.l"


 /* pascal keywords */
#line 1016 "delphi_yy.cpp"

	if ( yy_init )
		{
		yy_init = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yy_start )
			yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! yy_current_buffer )
			yy_current_buffer =
				yy_create_buffer( yyin, YY_BUF_SIZE );

		yy_load_buffer_state();
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start;
		yy_state_ptr = yy_state_buf;
		*yy_state_ptr++ = yy_current_state;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 583 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			*yy_state_ptr++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 678 );

yy_find_action:
		yy_current_state = *--yy_state_ptr;
		yy_lp = yy_accept[yy_current_state];
find_rule: /* we branch to this label when backing up */
		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( yy_lp && yy_lp < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[yy_lp];
					{
					yy_full_match = yy_cp;
					break;
					}
				}
			--yy_cp;
			yy_current_state = *--yy_state_ptr;
			yy_lp = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					++yylineno;
			}

do_action:	/* This label is used only to access EOF actions. */


		switch ( yy_act )
	{ /* beginning of action switch */
case 1:
YY_RULE_SETUP
#line 47 "delphi_yy.l"
return eAND;
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 48 "delphi_yy.l"
return eDOWNTO;
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 49 "delphi_yy.l"
return eIN;
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 50 "delphi_yy.l"
return eOR;
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 51 "delphi_yy.l"
return eSTRING;
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 52 "delphi_yy.l"
return eARRAY;
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 53 "delphi_yy.l"
return eELSE;
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 54 "delphi_yy.l"
return eINHERITED;
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 55 "delphi_yy.l"
return eOUT;
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 56 "delphi_yy.l"
return eTHEN;
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 57 "delphi_yy.l"
return eAS;
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 58 "delphi_yy.l"
return eEND;
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 59 "delphi_yy.l"
return eINITIALIZATION;
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 60 "delphi_yy.l"
return ePACKED;
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 61 "delphi_yy.l"
return eTHREADVAR;
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 62 "delphi_yy.l"
return eASM;
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 63 "delphi_yy.l"
return eEXCEPT;
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 64 "delphi_yy.l"
return eINLINE;
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 65 "delphi_yy.l"
return ePROCEDURE;
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 66 "delphi_yy.l"
return eTO;
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 67 "delphi_yy.l"
return eBEGIN;
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 68 "delphi_yy.l"
return eEXPORTS;
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 69 "delphi_yy.l"
return eINTERFACE;
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 70 "delphi_yy.l"
return ePROGRAM;
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 71 "delphi_yy.l"
return eTRY;
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 72 "delphi_yy.l"
return eCASE;
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 73 "delphi_yy.l"
return eFILE;
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 74 "delphi_yy.l"
return eIS;
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 75 "delphi_yy.l"
return ePROPERTY;
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 76 "delphi_yy.l"
return eTYPE;
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 77 "delphi_yy.l"
return eCLASS;
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 78 "delphi_yy.l"
return eFINALIZATION;
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 79 "delphi_yy.l"
return eLABEL;
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 80 "delphi_yy.l"
return eRAISE;
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 81 "delphi_yy.l"
return eUNIT;
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 82 "delphi_yy.l"
return eCONST;
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 83 "delphi_yy.l"
return eFINALLY;
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 84 "delphi_yy.l"
return eLIBRARY;
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 85 "delphi_yy.l"
return eRECORD;
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 86 "delphi_yy.l"
return eUNTIL;
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 87 "delphi_yy.l"
return eCONSTRUCTOR;
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 88 "delphi_yy.l"
return eFOR;
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 89 "delphi_yy.l"
return eMOD;
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 90 "delphi_yy.l"
return eREPEAT;
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 91 "delphi_yy.l"
return eUSES;
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 92 "delphi_yy.l"
return eDESTRUCTOR;
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 93 "delphi_yy.l"
return eFUNCTION;
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 94 "delphi_yy.l"
return eNIL;
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 95 "delphi_yy.l"
return eRESOURCESTRING;
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 96 "delphi_yy.l"
return eVAR;
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 97 "delphi_yy.l"
return eDISPINTERFACE;
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 98 "delphi_yy.l"
return eGOTO;
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 99 "delphi_yy.l"
return eNOT;
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 100 "delphi_yy.l"
return eSET;
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 101 "delphi_yy.l"
return eWHILE;
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 102 "delphi_yy.l"
return eDIV;
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 103 "delphi_yy.l"
return eIF;
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 104 "delphi_yy.l"
return eOBJECT;
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 105 "delphi_yy.l"
return eSHL;
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 106 "delphi_yy.l"
return eWITH;
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 107 "delphi_yy.l"
return eDO;
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 108 "delphi_yy.l"
return eIMPLEMENTATION;
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 109 "delphi_yy.l"
return eOF;
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 110 "delphi_yy.l"
return eSHR;
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 111 "delphi_yy.l"
return eXOR;
	YY_BREAK
/* keyword-like identifiers */
case 66:
YY_RULE_SETUP
#line 114 "delphi_yy.l"
return eABSOLUTE;
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 115 "delphi_yy.l"
return eDYNAMIC;
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 116 "delphi_yy.l"
return eNAME;
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 117 "delphi_yy.l"
return ePROTECTED;
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 118 "delphi_yy.l"
return eRESIDENT;
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 119 "delphi_yy.l"
return eABSTRACT;
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 120 "delphi_yy.l"
return eEXPORT;
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 121 "delphi_yy.l"
return eNEAR;
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 122 "delphi_yy.l"
return ePUBLIC;
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 123 "delphi_yy.l"
return eSAFECALL;
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 124 "delphi_yy.l"
return eASSEMBLER;
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 125 "delphi_yy.l"
return eEXTERNAL;
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 126 "delphi_yy.l"
return eNODEFAULT;
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 127 "delphi_yy.l"
return ePUBLISHED;
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 128 "delphi_yy.l"
return eSTDCALL;
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 129 "delphi_yy.l"
return eAUTOMATED;
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 130 "delphi_yy.l"
return eFAR;
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 131 "delphi_yy.l"
return eOVERLOAD;
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 132 "delphi_yy.l"
return eREAD;
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 133 "delphi_yy.l"
return eSTORED;
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 134 "delphi_yy.l"
return eCDECL;
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 135 "delphi_yy.l"
return eFORWARD;
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 136 "delphi_yy.l"
return eOVERRIDE;
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 137 "delphi_yy.l"
return eREADONLY;
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 138 "delphi_yy.l"
return eVIRTUAL;
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 139 "delphi_yy.l"
return eCONTAINS;
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 140 "delphi_yy.l"
return eIMPLEMENTS;
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 141 "delphi_yy.l"
return ePACKAGE;
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 142 "delphi_yy.l"
return eREGISTER;
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 143 "delphi_yy.l"
return eWRITE;
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 144 "delphi_yy.l"
return eDEFAULT;
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 145 "delphi_yy.l"
return eINDEX;
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 146 "delphi_yy.l"
return ePASCAL;
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 147 "delphi_yy.l"
return eREINTRODUCE;
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 148 "delphi_yy.l"
return eWRITEONLY;
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 149 "delphi_yy.l"
return eDISPID;
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 150 "delphi_yy.l"
return eMESSAGE;
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 151 "delphi_yy.l"
return ePRIVATE;
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 152 "delphi_yy.l"
return eREQUIRES;
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 153 "delphi_yy.l"
return eRESULT;
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 154 "delphi_yy.l"
return eCONTINUE;
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 155 "delphi_yy.l"
return eBREAK;
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 156 "delphi_yy.l"
return eEXIT;
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 157 "delphi_yy.l"
return eON;    //ivec20060701 not listed as a reserved word or directive in the language reference I have, even though it does act as a keyword after try..except
	YY_BREAK
/* more names for special processing */
case 110:
YY_RULE_SETUP
#line 159 "delphi_yy.l"
return eTRUE;
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 160 "delphi_yy.l"
return eFALSE;
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 161 "delphi_yy.l"
return eINC;
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 162 "delphi_yy.l"
return eDEC;
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 163 "delphi_yy.l"
return eASSIGNED;
	YY_BREAK
/* some key compiler directives */
case 115:
YY_RULE_SETUP
#line 167 "delphi_yy.l"
return ePRE_IFDEF;
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 168 "delphi_yy.l"
return ePRE_IFNDEF;
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 169 "delphi_yy.l"
return ePRE_ELSE;
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 170 "delphi_yy.l"
return ePRE_ENDIF;
	YY_BREAK
/* all symbols and special characters */
case 119:
YY_RULE_SETUP
#line 173 "delphi_yy.l"
return eBlanks;
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 174 "delphi_yy.l"
yytext[0] = '\n'; yytext[1] = '\0'; yyleng = 1; return eBlanks;
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 175 "delphi_yy.l"
return eCommentBlock;
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 176 "delphi_yy.l"
return eCommentLine;
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 177 "delphi_yy.l"
return eCharString;
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 178 "delphi_yy.l"
return eCharCoded;   /* was "#"{INT} */
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 179 "delphi_yy.l"
return eNumInt;
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 180 "delphi_yy.l"
return eNumFloat;
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 181 "delphi_yy.l"
return eID;
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 182 "delphi_yy.l"
return eBrackIn;
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 183 "delphi_yy.l"
return eBrackOut;
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 184 "delphi_yy.l"
return eParIn;
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 185 "delphi_yy.l"
return eParOut;
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 186 "delphi_yy.l"
return eRange;
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 187 "delphi_yy.l"
return eDot;
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 188 "delphi_yy.l"
return eComma;
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 189 "delphi_yy.l"
return eSemic;
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 190 "delphi_yy.l"
return eColon;
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 191 "delphi_yy.l"
return eAt;
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 192 "delphi_yy.l"
return eCirc;
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 193 "delphi_yy.l"
return ePlus;
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 194 "delphi_yy.l"
return eMinus;
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 195 "delphi_yy.l"
return eMul;
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 196 "delphi_yy.l"
return eDiv;
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 197 "delphi_yy.l"
return eAssign;
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 198 "delphi_yy.l"
return eEqual;
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 199 "delphi_yy.l"
return eUnequal;
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 200 "delphi_yy.l"
return eSmaller;
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 201 "delphi_yy.l"
return eLarger;
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 202 "delphi_yy.l"
return eSmallerEq;
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 203 "delphi_yy.l"
return eLargerEq;
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 204 "delphi_yy.l"
return eInto;
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 206 "delphi_yy.l"
return eIllegal;
	YY_BREAK
case YY_STATE_EOF(INITIAL):
#line 207 "delphi_yy.l"
return eEOF;
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 209 "delphi_yy.l"
ECHO;
	YY_BREAK
#line 1875 "delphi_yy.cpp"

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between yy_current_buffer and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yy_n_chars = yy_current_buffer->yy_n_chars;
			yy_current_buffer->yy_input_file = yyin;
			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer() )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yy_did_buffer_switch_on_eof = 0;

				if ( yywrap() )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yy_c_buf_p =
					yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yy_c_buf_p =
				&yy_current_buffer->yy_ch_buf[yy_n_chars];

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of yylex */


/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

static int yy_get_next_buffer()
	{
	register char *dest = yy_current_buffer->yy_ch_buf;
	register char *source = yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( yy_current_buffer->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		yy_current_buffer->yy_n_chars = yy_n_chars = 0;

	else
		{
		int num_to_read =
			yy_current_buffer->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = yy_current_buffer;

			int yy_c_buf_p_offset =
				(int) (yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yy_flex_realloc( (void *) b->yy_ch_buf,
							 b->yy_buf_size + 2 );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = yy_current_buffer->yy_buf_size -
						number_to_move - 1;
#endif
			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
			yy_n_chars, num_to_read );

		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	if ( yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			yy_current_buffer->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

	return ret_val;
	}


/* yy_get_previous_state - get the state just before the EOB char was reached */

static yy_state_type yy_get_previous_state()
	{
	register yy_state_type yy_current_state;
	register char *yy_cp;

	yy_current_state = yy_start;
	yy_state_ptr = yy_state_buf;
	*yy_state_ptr++ = yy_current_state;

	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 583 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		*yy_state_ptr++ = yy_current_state;
		}

	return yy_current_state;
	}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */

#ifdef YY_USE_PROTOS
static yy_state_type yy_try_NUL_trans( yy_state_type yy_current_state )
#else
static yy_state_type yy_try_NUL_trans( yy_current_state )
yy_state_type yy_current_state;
#endif
	{
	register int yy_is_jam;

	register YY_CHAR yy_c = 1;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 583 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 582);
	if ( ! yy_is_jam )
		*yy_state_ptr++ = yy_current_state;

	return yy_is_jam ? 0 : yy_current_state;
	}


#ifndef YY_NO_UNPUT
#ifdef YY_USE_PROTOS
static void yyunput( int c, register char *yy_bp )
#else
static void yyunput( c, yy_bp )
int c;
register char *yy_bp;
#endif
	{
	register char *yy_cp = yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yy_hold_char;

	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yy_n_chars + 2;
		register char *dest = &yy_current_buffer->yy_ch_buf[
					yy_current_buffer->yy_buf_size + 2];
		register char *source =
				&yy_current_buffer->yy_ch_buf[number_to_move];

		while ( source > yy_current_buffer->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		yy_current_buffer->yy_n_chars =
			yy_n_chars = yy_current_buffer->yy_buf_size;

		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	if ( c == '\n' )
		--yylineno;

	yytext_ptr = yy_bp;
	yy_hold_char = *yy_cp;
	yy_c_buf_p = yy_cp;
	}
#endif	/* ifndef YY_NO_UNPUT */


#ifdef __cplusplus
static int yyinput()
#else
static int input()
#endif
	{
	int c;

	*yy_c_buf_p = yy_hold_char;

	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			/* This was really a NUL. */
			*yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yy_c_buf_p - yytext_ptr;
			++yy_c_buf_p;

			switch ( yy_get_next_buffer() )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/* fall through */

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap() )
						return EOF;

					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yy_c_buf_p = yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
	*yy_c_buf_p = '\0';	/* preserve yytext */
	yy_hold_char = *++yy_c_buf_p;

	if ( c == '\n' )
		++yylineno;

	return c;
	}


#ifdef YY_USE_PROTOS
void yyrestart( FILE *input_file )
#else
void yyrestart( input_file )
FILE *input_file;
#endif
	{
	if ( ! yy_current_buffer )
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

	yy_init_buffer( yy_current_buffer, input_file );
	yy_load_buffer_state();
	}


#ifdef YY_USE_PROTOS
void yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
#else
void yy_switch_to_buffer( new_buffer )
YY_BUFFER_STATE new_buffer;
#endif
	{
	if ( yy_current_buffer == new_buffer )
		return;

	if ( yy_current_buffer )
		{
		/* Flush out information for old buffer. */
		*yy_c_buf_p = yy_hold_char;
		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	yy_current_buffer = new_buffer;
	yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yy_did_buffer_switch_on_eof = 1;
	}


#ifdef YY_USE_PROTOS
void yy_load_buffer_state( void )
#else
void yy_load_buffer_state()
#endif
	{
	yy_n_chars = yy_current_buffer->yy_n_chars;
	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
	}


#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_create_buffer( FILE *file, int size )
#else
YY_BUFFER_STATE yy_create_buffer( file, size )
FILE *file;
int size;
#endif
	{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
	}


#ifdef YY_USE_PROTOS
void yy_delete_buffer( YY_BUFFER_STATE b )
#else
void yy_delete_buffer( b )
YY_BUFFER_STATE b;
#endif
	{
	if ( ! b )
		return;

	if ( b == yy_current_buffer )
		yy_current_buffer = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yy_flex_free( (void *) b->yy_ch_buf );

	yy_flex_free( (void *) b );
	}


#ifndef YY_ALWAYS_INTERACTIVE
#ifndef YY_NEVER_INTERACTIVE
extern int isatty YY_PROTO(( int ));
#endif
#endif

#ifdef YY_USE_PROTOS
void yy_init_buffer( YY_BUFFER_STATE b, FILE *file )
#else
void yy_init_buffer( b, file )
YY_BUFFER_STATE b;
FILE *file;
#endif


	{
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

#if YY_ALWAYS_INTERACTIVE
	b->yy_is_interactive = 1;
#else
#if YY_NEVER_INTERACTIVE
	b->yy_is_interactive = 0;
#else
	b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
#endif
#endif
	}


#ifdef YY_USE_PROTOS
void yy_flush_buffer( YY_BUFFER_STATE b )
#else
void yy_flush_buffer( b )
YY_BUFFER_STATE b;
#endif

	{
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == yy_current_buffer )
		yy_load_buffer_state();
	}


#ifndef YY_NO_SCAN_BUFFER
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_buffer( char *base, yy_size_t size )
#else
YY_BUFFER_STATE yy_scan_buffer( base, size )
char *base;
yy_size_t size;
#endif
	{
	YY_BUFFER_STATE b;

	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b );

	return b;
	}
#endif


#ifndef YY_NO_SCAN_STRING
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_string( yyconst char *yy_str )
#else
YY_BUFFER_STATE yy_scan_string( yy_str )
yyconst char *yy_str;
#endif
	{
	int len;
	for ( len = 0; yy_str[len]; ++len )
		;

	return yy_scan_bytes( yy_str, len );
	}
#endif


#ifndef YY_NO_SCAN_BYTES
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_bytes( yyconst char *bytes, int len )
#else
YY_BUFFER_STATE yy_scan_bytes( bytes, len )
yyconst char *bytes;
int len;
#endif
	{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;

	/* Get memory for full buffer, including space for trailing EOB's. */
	n = len + 2;
	buf = (char *) yy_flex_alloc( n );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < len; ++i )
		buf[i] = bytes[i];

	buf[len] = buf[len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
	}
#endif


#ifndef YY_NO_PUSH_STATE
#ifdef YY_USE_PROTOS
static void yy_push_state( int new_state )
#else
static void yy_push_state( new_state )
int new_state;
#endif
	{
	if ( yy_start_stack_ptr >= yy_start_stack_depth )
		{
		yy_size_t new_size;

		yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yy_start_stack_depth * sizeof( int );

		if ( ! yy_start_stack )
			yy_start_stack = (int *) yy_flex_alloc( new_size );

		else
			yy_start_stack = (int *) yy_flex_realloc(
					(void *) yy_start_stack, new_size );

		if ( ! yy_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	yy_start_stack[yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
	}
#endif


#ifndef YY_NO_POP_STATE
static void yy_pop_state()
	{
	if ( --yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yy_start_stack[yy_start_stack_ptr]);
	}
#endif


#ifndef YY_NO_TOP_STATE
static int yy_top_state()
	{
	return yy_start_stack[yy_start_stack_ptr - 1];
	}
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

#ifdef YY_USE_PROTOS
static void yy_fatal_error( yyconst char msg[] )
#else
static void yy_fatal_error( msg )
char msg[];
#endif
	{
	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
	}



/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		yytext[yyleng] = yy_hold_char; \
		yy_c_buf_p = yytext + n; \
		yy_hold_char = *yy_c_buf_p; \
		*yy_c_buf_p = '\0'; \
		yyleng = n; \
		} \
	while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
#endif
	{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
	}
#endif

#ifdef YY_NEED_STRLEN
#ifdef YY_USE_PROTOS
static int yy_flex_strlen( yyconst char *s )
#else
static int yy_flex_strlen( s )
yyconst char *s;
#endif
	{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
	}
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
	{
	return (void *) malloc( size );
	}

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
	{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
	}

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
	{
	free( ptr );
	}

#if YY_MAIN
int main()
	{
	yylex();
	return 0;
	}
#endif
#line 209 "delphi_yy.l"






