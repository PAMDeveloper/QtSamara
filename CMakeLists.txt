CMAKE_MINIMUM_REQUIRED(VERSION 2.6)
PROJECT(SAMARA CXX C)
ENABLE_TESTING()

if (WIN32)
    LINK_DIRECTORIES("D:/ModelsVS14/Lib/x64")
    INCLUDE_DIRECTORIES("D:/ModelsVS14/include")
    #add_definitions(-llibpqdll)
    SET(BOOST_ROOT D:/Lib/boost_1_62_0)
    SET(BOOST_VERSION 64)
    SET(BOOST_LIBS "${BOOST_ROOT}/lib64-msvc-14.0")


#	LINK_DIRECTORIES("D:/samara/Lib/x64")
#       add_definitions(-lpq)
#	SET(BOOST_ROOT D:/Lib/boost_1_62_0)
#	SET(BOOST_VERSION 64)
#	SET(BOOST_LIBS "${BOOST_ROOT}/stage/lib${BOOST_VERSION}")
#       INCLUDE_DIRECTORIES("D:/Lib/libpq32/include")
	
        SET(CMAKE_INCLUDE_PATH ${CMAKE_INCLUDE_PATH} ${BOOST_ROOT})
        SET(CMAKE_LIBRARY_PATH ${CMAKE_LIBRARY_PATH} ${BOOST_LIBS})
        SET(BOOST_ROOT  ${BOOST_ROOT})
        SET(Boost_INCLUDE_DIR  ${BOOST_ROOT})
        SET(Boost_LIBRARY_DIR ${BOOST_LIBS})
        SET(BOOST_INCLUDEDIR  ${BOOST_ROOT})
        SET(BOOST_LIBRARYDIR ${BOOST_LIBS})
endif (WIN32)


OPTION(WITH_TEST "use the libboost test unit library [default: on]" ON)
SET(Boost_USE_MULTITHREADED ON)
SET(Boost_USE_STATIC_LIBS OFF)
SET(Boost_NO_SYSTEM_PATHS OFF)
# SET(Boost_USE_STATIC_RUNTIME ON)
SET(Boost_DETAILED_FAILURE_MSG FALSE)
SET(Boost_DEBUG FALSE)


FIND_PACKAGE(Boost COMPONENTS date_time filesystem graph program_options system)
INCLUDE_DIRECTORIES(${Boost_INCLUDE_DIR})


SET(SAMARA_MAJOR 2)
SET(SAMARA_MINOR 1)
SET(SAMARA_PATCH 0)
SET(SAMARA_EXTRA "")
SET(SAMARA_VERSION "${SAMARA_MAJOR}.${SAMARA_MINOR}.${SAMARA_PATCH}")
SET(SAMARA_VERSION_SHORT "${SAMARA_MAJOR}.${SAMARA_MINOR}")
SET(SAMARA_NAME "samara")
SET(SAMARA_NAME_VERSION "${SAMARA_NAME}-${SAMARA_VERSION}")
SET(SAMARA_LOCALE_NAME "${SAMARA_NAME}-${SAMARA_MAJOR}-${SAMARA_MINOR}")
IF ("${SAMARA_EXTRA}" STREQUAL "")
  SET(SAMARA_COMPLETE "${SAMARA_MAJOR}.${SAMARA_MINOR}.${SAMARA_PATCH}")
ELSE ("${SAMARA_EXTRA}" STREQUAL "")
  SET(SAMARA_COMPLETE "${SAMARA_MAJOR}.${SAMARA_MINOR}.${SAMARA_PATCH}-${SAMARA_EXTRA}")
ENDIF ("${SAMARA_EXTRA}" STREQUAL "")
SET(SAMARA_NAME_COMPLETE "${SAMARA_NAME}-${SAMARA_COMPLETE}")

#
 # Installation variables
#

SET(SAMARA_LIBRARY_DIRS "lib/samara-${SAMARA_VERSION_SHORT}")
SET(SAMARA_INCLUDE_DIRS "include/samara-${SAMARA_VERSION_SHORT}/samara")
SET(SAMARA_INCLUDE_DIR "include/samara-${SAMARA_VERSION_SHORT}")
SET(SAMARA_MANPAGE_PATH "share/man/man1")
SET(SAMARA_SHARE_DIRS "share/samara-${SAMARA_VERSION_SHORT}")

#
 # Append the library version information to the library target
 # properties.
#

SET(SAMARA_LIBRARY_PROPERTIES VERSION 0)
SET(SAMARA_APP_PROPERTIES SOVERSION "${SAMARA_MAJOR}.${SAMARA_MINOR}"
  VERSION "${SAMARA_MAJOR}.${SAMARA_MINOR}")

#
 # CPack configuration
#

INCLUDE(CMakeCPack.cmake)

#
# Append debug mode when compiler is GNU.
#

if (CMAKE_BUILD_TYPE STREQUAL "")
  SET(CMAKE_BUILD_TYPE "Debug" CACHE STRING "Choose the type of build" FORCE)
endif ()

if (${CMAKE_CXX_COMPILER_ID} STREQUAL "Clang" OR ${CMAKE_CXX_COMPILER_ID} STREQUAL "GNU")
  set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -Wall -Wextra")
  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall -Wextra -std=c++11")

  if ("${CMAKE_BUILD_TYPE}" EQUAL "Debug" OR "${CMAKE_BUILD_TYPE}" EQUAL "RelWithDebInfo")
    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -ggdb3")
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -ggdb3")
  endif ()
endif ()

if (CMAKE_BUILD_TYPE STREQUAL "")
  SET(CMAKE_BUILD_TYPE "RelWithDebInfo" CACHE STRING "Choose the type of build" FORCE)
endif ()

#
 # Modules
#

INCLUDE(CheckIncludeFileCXX)
INCLUDE(CheckIncludeFile)
INCLUDE(CheckLibraryExists)
INCLUDE(CMakeDetermineCCompiler)

#
 # Check libraries with pkgconfig
#

 FIND_PACKAGE(PkgConfig REQUIRED)
 PKG_CHECK_MODULES(ARTIS artis-1.0)

# FIXME use old-style link directories for now
IF (COMMAND CMAKE_POLICY)
  CMAKE_POLICY(SET CMP0003 OLD)
ENDIF (COMMAND CMAKE_POLICY)

#
 # Test the libboost header and libboost-text library.
#



# FIND_PACKAGE(Boost COMPONENTS
        # date_time filesystem graph program_options system REQUIRED)
# IF (Boost_MINOR_VERSION AND ${Boost_MINOR_VERSION} LESS "35")
  # SET(Boost_SYSTEM_LIBRARY "")
# ENDIF (Boost_MINOR_VERSION AND ${Boost_MINOR_VERSION} LESS "35")
# IF (Boost_MINOR_VERSION AND ${Boost_MINOR_VERSION} LESS "41")
  # SET(SAMARA_HAVE_BOOST_SPIRIT2 0 CACHE INTERNAL "" FORCE)
# ELSE (Boost_MINOR_VERSION AND ${Boost_MINOR_VERSION} LESS "41")
  # SET(SAMARA_HAVE_BOOST_SPIRIT2 1 CACHE INTERNAL "" FORCE)
# ENDIF (Boost_MINOR_VERSION AND ${Boost_MINOR_VERSION} LESS "41")

#
 # Generate the config.h
#

CHECK_INCLUDE_FILE_CXX(cxxabi.h SAMARA_HAVE_GCC_ABI_DEMANGLE)
CHECK_INCLUDE_FILE_CXX(execinfo.h SAMARA_HAVE_EXECINFO)
CHECK_INCLUDE_FILE_CXX(signal.h SAMARA_HAVE_SIGNAL)
INCLUDE_DIRECTORIES(${SAMARA_BINARY_DIR})

#
 # Generate the vle.pc pkg-config file.
 # Build some variable to build a correct Win32 pkg config file with:
 # prefix=/target to detect the DIRNAME
 # cflag=-Iboost_1_34_1 for the directory
#

SET(SAMARA_PKGCONFIG_PREFIXPATH "${CMAKE_INSTALL_PREFIX}")
SET(SAMARA_PKGCONFIG_BOOSTINCLUDE_DIRS "${Boost_INCLUDE_DIRS}")
SET(SAMARA_PKGCONFIG_LIBDIR "lib")

CONFIGURE_FILE(${PROJECT_SOURCE_DIR}/src/samara.pc.in
  ${SAMARA_BINARY_DIR}/samara-${SAMARA_VERSION_SHORT}.pc @ONLY)
INSTALL(FILES ${SAMARA_BINARY_DIR}/samara-${SAMARA_VERSION_SHORT}.pc
  DESTINATION lib/pkgconfig)

#
 # Install the README
#

# INSTALL(FILES "README" DESTINATION "${SAMARA_SHARE_DIRS}")
# INSTALL(FILES "COPYING" DESTINATION "${SAMARA_SHARE_DIRS}")
IF(UNIX)
	INSTALL(FILES "README" DESTINATION "${SAMARA_SHARE_DIRS}")
	INSTALL(FILES "COPYING" DESTINATION "${SAMARA_SHARE_DIRS}")
ELSE(UNIX)
  INSTALL(FILES "README" DESTINATION "${SAMARA_SHARE_DIRS}" RENAME "Readme.txt")
  INSTALL(FILES "COPYING" DESTINATION "${SAMARA_SHARE_DIRS}" RENAME "CopyRight.txt")
ENDIF(UNIX)

#
 # Databases
#
# if (NOT WIN32)
	# PKG_CHECK_MODULES(PQXX libpqxx)
# endif ()

PKG_CHECK_MODULES(PQ libpq)

#
 # Browse the src subdirectory
#

ADD_SUBDIRECTORY(src/samara)

#
 # Status
#

MESSAGE(STATUS "- - - -")
MESSAGE(STATUS "${SAMARA_NAME_COMPLETE} configured successfully")
MESSAGE(STATUS "Using ${CMAKE_INSTALL_PREFIX} for installation")
MESSAGE(STATUS "Build type ${CMAKE_BUILD_TYPE}")
IF (SAMARA_HAVE_GCC_ABI_DEMANGLE)
  MESSAGE(STATUS "Build with GCC ABI Demangle...: yes")
ENDIF (SAMARA_HAVE_GCC_ABI_DEMANGLE)
IF (SAMARA_HAVE_EXECINFO)
  MESSAGE(STATUS "Build with execinfo.h.........: yes")
ENDIF (SAMARA_HAVE_EXECINFO)
IF (Boost_FOUND)
  MESSAGE(STATUS "Build with boost..............: yes")
ENDIF (Boost_FOUND)
MESSAGE(STATUS "- - - -")
